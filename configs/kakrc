# eval %sh{kak-lsp --kakoune -s $kak_session}
# lsp-enable
# map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"

add-highlighter global/ number-lines -relative -separator ' '
add-highlighter global/ wrap
set-option -add global ui_options terminal_assistant=none
colorscheme plain

# remove trailing whitespaces
hook global BufWritePre .* %{ try %{ execute-keys -draft \%s\h+$<ret>d } }

# width in spaces used for indentation (commands < >)
set-option global indentwidth 4

# display width of a tab
set-option global tabstop 4

# remap <tab> to insert indentwidth
map global insert <tab> '<a-;><a-gt>'

hook global InsertCompletionShow .* %{
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

hook global WinSetOption filetype=go %{
    set-option global indentwidth 0
}

hook global WinSetOption filetype=markdown %{
    remove-highlighter shared/markdown/inline/text/regex_(?<!\*)(\*([^\s*]|([^\s*](\n?[^\n*])*[^\s*]))\*)(?!\*)_1:+i
    remove-highlighter shared/markdown/inline/text/regex_(?<!_)(_([^\s_]|([^\s_](\n?[^\n_])*[^\s_]))_)(?!_)_1:+i
}

hook global ModuleLoaded x11 %{
    set-option global termcmd "st -e sh -c"
}

define-command -hidden fzf_file_edit %{
    evaluate-commands -draft %{
        set-register r %sh{mktemp -d}
        nop %sh{mkfifo $kak_reg_r/out}
        terminal sh -c "fzf > %reg{r}/out"
        set-register s %sh{cat $kak_reg_r/out}
        nop %sh{rm -rf $kak_reg_r}
        nop %sh{
            if [ -n "$kak_reg_s" ]
            then
                echo 'e %reg{s}' > $kak_command_fifo
            fi
        }
    }
}

map global normal <a-minus> ':fzf_file_edit<ret>'
map global normal <a-q> ':db<ret>'
map global normal <a-tab> ':buffer-next<ret>'
map global normal <a-c-tab> ':buffer-previous<ret>'
